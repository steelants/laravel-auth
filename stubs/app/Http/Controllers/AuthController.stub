<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rules\Password;
use Illuminate\Support\Facades\Password as PasswordFacade;
use Illuminate\Support\Str;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Support\Facades\DB;

class AuthController
{
    public string $redirect = 'home';

    public function register()
    {
        return view('auth.registration');
    }

    public function registerPost(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'name' => ['required', 'max:255'],
            'email' => ['required', 'unique:users,email'],
            'password' => ['required', 'confirmed', Password::min(8)],
        ]);

        $user = new User();
        $user->name = $request->name;
        $user->email = $request->email;
        $user->password = Hash::make($request->password);
        $user->save();

        return back()->with('success', 'Successfully registered');
    }

    public function login()
    {
        return view('auth.login');
    }

    public function loginPost(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'email' => ['required', 'exists:users,email'],
            'password' => ['required'],
        ]);

        $credentials = $validated;

        if (Auth::attempt($credentials)) {
            return redirect()->route($this->redirect);
        }

        return back()->with('error', 'Sesprávné jméno nebo heslo');
    }

    public function logout(): RedirectResponse
    {
        Auth::logout();
        return redirect()->route('login');
    }

    public function reset()
    {
        return view('auth.reset');
    }

    public function resetPost(Request $request)
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        $response = PasswordFacade::broker()->sendResetLink($request->only('email'));

        return $response == PasswordFacade::RESET_LINK_SENT
            ? back()->with('status', trans($response))
            : back()->withInput($request->only('email'))->withErrors(['email' => trans($response)]);
    }

    public function resetToken(Request $request)
    {
        $token = $request->route()->parameter('token');
        return view('auth.reset')->with([
            'token' => $token,
            'email' => $request->email
        ]);
    }

    public function resetPasswordSubmit(Request $request)
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required','email'],
            'password' => ['required', 'confirmed', Password::min(8)],
        ]);

        $response = PasswordFacade::broker()->reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user, $password) { 
                $this->resetPassword($user, $password); 
            }
        );

        return $response == PasswordFacade::PASSWORD_RESET
            ? redirect()->route($this->redirect)->with('status', trans($response))
            : redirect()->back() ->withInput($request->only('email')) ->withErrors(['email' => trans($response)]);
    }

    protected function resetPassword($user, $password)
    {
        $user->password = Hash::make($password);
        $user->setRememberToken(Str::random(60));
        $user->save();

        event(new PasswordReset($user));

        //Invalidate rest of reset tokens for same user
        DB::table('password_reset_tokens')->where('email',$user->email)->delete();
        
        Auth::guard()->login($user);
    }
}
